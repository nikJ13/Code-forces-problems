************QUESTION (DID NOT DO IT ON MY OWN)************************
You are given a two-dimensional list of integers edges representing a directed graph and integers a and b. Each element in edges contains [u, v] meaning there's an edge from u to v.

Return whether there's some node c such that we can go from c to a and c to b.

Constraints

1 ≤ n ≤ 100,000 where n is the length of edges
Example 1
Input
Visualize
edges = [
    [0, 4],
    [4, 3],
    [1, 2],
    [0, 1],
    [0, 2],
    [1, 1]
]
a = 2
b = 3
Output
True
Explanation
We can reach 2 and 3 from 0

Example 2
Input
Visualize
edges = [
    [0, 1],
    [1, 2],
    [1, 3],
    [1, 1],
    [4, 5]
]
a = 2
b = 4
Output
False
Explanation
2 and 4 are on different connected components.

Example 3
Input
Visualize
edges = [
    [0, 0]
]
a = 0
b = 0
Output
True
**************************************************
class Solution:
    def solve(self, edges, a, b):
        gra = defaultdict(set)
        for i in edges:
            gra[i[1]].add(i[0])    # HERE THE KEY IS THE RECEIVING NODES AND THE VALUES IN EACH NODE ARE THE PARENT NODES OF THE RECEIVING NODE
        
        def getit(node):      # VISITING FROM THE RECEIVING TO THE PARENT NODES (BOTTOM-TOP APPROACH)
            que = [node]
            visited = {node}
            for j in que:
                for k in gra[j]-visited:
                    que.append(k)
                    visited.add(k)
            return visited
        return bool(getit(a) & getit(b))   # CHECKS IF THERE IS A COMMON NODE AMONG THE TWO VISITED NODES ARRAYS
(USED THE PROPERTIES OF SETS; BFS SEARCH)
