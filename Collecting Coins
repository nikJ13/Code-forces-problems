**********QUESTION*************
You are given a two-dimensional integer matrix where each cell represents number of coins in that cell. Assuming we start at matrix[0][0], and can only move right or down, find the maximum number of coins you can collect by the bottom right corner.

Constraints

n, m â‰¤ 100 where n and m are the number of rows and columns in matrix.
Example 1
Input
matrix = [
    [0, 3, 1, 1],
    [2, 0, 0, 4]
]
Output
9
Explanation
We take the following path: [0, 3, 1, 1, 4]

Example 2
Input
matrix = [
    [0, 3, 1, 1],
    [2, 0, 0, 4],
    [1, 5, 3, 1]
]
Output
12
Explanation
We take the following path: [0, 2, 1, 5, 3, 1]

Example 3
Input
matrix = [
    [0, 2, 1],
    [2, 5, 0],
    [4, 1, 3]
]
Output
11
Explanation
We take the following path: [0, 2, 5, 1, 3]
***************************
class Solution:
    def solve(self, matrix):
        dp = [[0]*len(matrix[0]) for _ in range(len(matrix))]
        i = 0
        j = 1
        dp[0][0] = matrix[0][0]
        hori = len(matrix)
        verti = len(matrix[0])
        while True:
            if i==hori:
                break
            if j==verti:
                i += 1
                j = 0
                continue
            if i==0:
                dp[i][j] = matrix[i][j] + dp[i][j-1]
                j+= 1
                continue
            if j==0:
                dp[i][j] = matrix[i][j] + dp[i-1][j]
                j += 1
                continue
            dp[i][j] = matrix[i][j] + max(dp[i-1][j],dp[i][j-1])
            j += 1
        return dp[-1][-1]
