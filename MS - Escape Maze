***********************QUESTION******************************
You are given a two dimensional integer matrix, representing a maze where 0 is an empty cell, and 1 is a wall. Given that you start at matrix[0][0], return the minimum number of squares it would take to get to matrix[R - 1][C - 1] (where R and C are the number of rows and columns in the matrix).

If it's not possible, return -1.

Constraints

n, m â‰¤ 250 where n and m are the number of rows and columns in matrix
Example 1
Input
matrix = [
    [0, 1, 0],
    [0, 0, 1],
    [0, 0, 0]
]
Output
5
Explanation
We can take this path:

@ 1 0 
@ @ 1
0 @ @
Example 2
Input
matrix = [
    [0, 0, 0],
    [0, 0, 0],
    [0, 0, 1]
]
Output
-1
Explanation
We can't reach the bottom right because it's blocked.
******************************************************************
class Solution:
    def solve(self, matrix):
        if matrix[0][0]==1 or matrix[-1][-1]==1:
            return -1
        n,m = len(matrix),len(matrix[0])
        visited = [[-1 for k in range(m)] for g in range(n)]
        visited[0][0],que = 1,[(0,0)]
        l = [(-1,0),(0,1),(1,0),(0,-1)]
        while que:
            a = que.pop(0)
            for j in l:
                if a[0]+j[0]<0 or a[0]+j[0]>=n or a[1]+j[1]<0 or a[1]+j[1]>=m or matrix[a[0]+j[0]][a[1]+j[1]]==1:
                    continue
                if visited[a[0]+j[0]][a[1]+j[1]]==-1:
                    visited[a[0]+j[0]][a[1]+j[1]] = visited[a[0]][a[1]] + 1
                    que.append((a[0]+j[0],a[1]+j[1]))
        return visited[-1][-1]
