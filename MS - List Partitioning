******************QUESTION**************************
Given a list of strings strs, containing the strings "red", "green" and "blue", partition the list so that the red come before green, which come before blue.

This should be done in \mathcal{O}(n)O(n) time.

Bonus: Can you do it in \mathcal{O}(1)O(1) space? That is, can you do it by only rearranging the list (i.e. without creating any new strings)?

Constraints

n â‰¤ 100,000 where n is the length of strs.
Example 1
Input
strs = ["green", "blue", "red", "red"]
Output
["red", "red", "green", "blue"]
******************************************************
class Solution:
    def solve(self, strs):
        dict1 = Counter(strs)
        r = dict1["red"]
        g = dict1["green"]
        b = dict1["blue"]
        i = 0
        n = len(strs)
        while i<n:
            if i<r:
                strs[i] = "red"
                i+=1
            elif i-r<g:
                strs[i] = "green"
                i += 1
            elif i-(r+g)<b:
                strs[i] = "blue"
                i += 1
        return strs

##### OPTIMIZED SOLUTION
Intuition
This is the famous dutch flag problem. Start from the beginning swapping in all reds. Picking up where that left off, swap in all greens. All blues are where they need to be.

You can read more about the problem and its origins on wikipedia.

Implementation
Swapping is done in the partition function, which is reused for handling red and green.

Time Complexity
O(n) - Two linear passes are made over the input. Once for locating all red and another for green.

Space Complexity
O(1) - Only a few pointers are needed

class Solution:
    def solve(self, s):
        def partition(s, start, word):
            for i in range(start, len(s)):
                if s[i] == word:
                    s[i], s[start] = s[start], s[i]
                    start += 1
            return start

        start = partition(s, 0, "red")
        partition(s, start, "green")
        return s
