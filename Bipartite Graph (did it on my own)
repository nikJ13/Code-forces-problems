***********QUESTION******************
Given an undirected graph represented as an adjacency list, return whether the graph is bipartite.

Constraints

n, m â‰¤ 250 where n and m are the number of rows and columns in graph
Example 1
Input
Visualize
graph = [
    [1],
    [0]
]
Output
True
Explanation
This is bipartite since the node 1 can belong in set A and node 2 can belong in set B. Then the edges 0 -> 1 and 1 -> 0 has one node in A and one node in B

Example 2
Input
Visualize
graph = [
    [2, 3],
    [2, 3],
    [0, 1],
    [0, 1]
]
Output
True
Explanation
0 and 1 can belong in set A and 2 and 3 can belong in set B.

Example 3
Input
Visualize
graph = [
    [1, 2, 3],
    [0, 2],
    [0, 1, 3],
    [0, 2]
]
Output
False
Explanation
No matter how the nodes are partitioned, an edge will belong to the same set.

CHECK OUT THE PROBLEM: https://binarysearch.com/problems/Bipartite-Graph
*****************************************************************
class Solution:
    def solve(self, graph):
        n = len(graph)
        visited = [False]*n       # visited noeds list
        nodes = [0]*n             # each node can be coloured as 0 or 1
        i = 0
        j = -1
        visited[i] = True
        dict1 = defaultdict(list)     # declaring a dictionary, where each node traversed will be the key and adjacent nodes to that particular node is list value for that key
        dict1[i] = graph[i]
        while sum(visited)!=n:       # if all the nodes are visited then end loop
            j += 1                   # increment the index value, which is 'j'
            l = list(dict1)          # on converting dictionarly into list, the list will contain only the key values
            i = l[j]                 # 'i' will store the value of the key from the dictionary at the jth index; this value stores the node which is currently being visited
            k = len(dict1[i])
            for _ in range(k):       # iterating through the adjacent values of the particular node being currently visited
                a = dict1[i].pop(0)
                if visited[a]==True and nodes[a]==nodes[i]:   # if the adjacent node is already visited, that means its corresponding 'nodes' value would be fixed; hence we can compare it with the mentioned condition
                    return False
                else:
                    if nodes[i]==1:              # put the 'node' value based on the condition
                        nodes[a] = 0
                    elif nodes[i]==0:
                        nodes[a] = 1
                    if visited[a]==False:         # if the adjacent node is not visited, then put it in the dictionary so that it will be visited later on
                        dict1[a] = graph[a]
            visited[i] = True                   # marking the current node as visited
        return True

USES BFS AND HASH MAPS (DICTIONARY)
