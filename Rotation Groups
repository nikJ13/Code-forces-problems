***********QUESTION******************
A rotation group for a string contains all of its unique rotations. For example, "123" can be rotated to "231" and "312" and they are all in the same rotation group.

Given a list of strings words, group each word by their rotation group, and return the total number of groups.

Constraints

n â‰¤ 200 where n is the length of words.
Example 1
Input
words = ["abc", "xy", "yx", "z", "bca"]
Output
3
Explanation
There are three rotation groups:

["abc", "bca"]
["xy", "yx"]
["z"]
*********************************************
# MY APPROACH
class Solution:
    def solve(self, words):
        n = len(words)
        def solveit(word1,word2):       # FUNCTION TO CHECK FOR ROTATION
            g = len(word2)
            l = list(word1)
            for i in range(g):
                leftside = l[:g-i][::-1]
                rightside = l[g-i:][::-1]
                final = (leftside+rightside)[::-1]
                if ''.join(final)==word2:
                    return True
            return False
            
        count = 0
        for i in range(n):
            if words[i]=="*":
                continue
            for j in range(i+1,n):
                if solveit(words[i],words[j]):
                    words[j] = "*"
            count += 1
        return count

# OPTIMAL APPROACH
class Solution:
    def solve(self, words):
        s = set(words)
        for ind in range(len(words)):
            c = words[ind]

            for i in s:
                if len(c) == len(i) and c in i * 2:
                    break
            else:
                s.add(c)
        return len(s)
